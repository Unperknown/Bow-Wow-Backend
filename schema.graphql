type User {
  uid: ID!
  name: String!
  nickname: String
  id: String!
  password: String!
  profile: AWSURL
  location: Coordinate
  pet: [Pet]
}

type Post {
  id: ID!
  user: User!
  pictures: [AWSURL]
  description: String!
  likes: [User]
}

type Hospital {
  id: ID!
  name: String
  description: String
  start_time: AWSDateTime
  end_time: AWSDateTime
  location: Coordinate
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  me: User
  pet(petId: ID!): Pet
  myPets: [Pet]
  hospitals(coordinate: CoordinateInput!): [Hospital]
  diagnosis(petId: ID!): [Diagnosis]
  alarms(petId: ID!): [Alarm]
}

type Mutation {
  createUser(
    name: String!
    nickname: String
    id: String!
    password: String!
    profile: AWSURL
    location: CoordinateInput
  ): User
  createPet(name: String!, age: Int, weight: Float, profile: AWSURL): Pet
  createPost(description: String, pictures: [AWSURL]): Post
  createAlarm(petId: ID!, time: AWSDateTime): Alarm
  createDiagnosis(
    petId: ID!
    startTime: AWSDateTime!
    endTime: AWSDateTime!
  ): Diagnosis

  closeUser: User

  deletePet(petId: ID!): Pet
  deleteAlarm(petId: ID!, alarmId: ID!): Alarm
  deletePost(id: ID!): Post

  likePost: Post
  dislikePost: Post
}

type Subscription {
  subscribeToNewPet(petId: ID!): Pet @aws_subscribe(mutations: ["createPet"])
}

type Pet {
  id: ID!
  name: String
  age: Int
  weight: Float
  profile: AWSURL
  diagnosis: [Diagnosis]
  alarm: [Alarm]
}

type Coordinate {
  lat: Float!
  lng: Float!
}

type Alarm {
  id: ID!
  time: AWSDateTime
}

type Diagnosis {
  id: ID!
  start_time: AWSDateTime!
  end_time: AWSDateTime!
}

input CoordinateInput {
  lat: Float!
  lng: Float!
}